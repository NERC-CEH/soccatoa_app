golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
# Convert data to long format for easier legend handling
data_long <- tidyr::pivot_longer(data_2,
cols = c(total, climate_effect), names_to = "category", values_to = "value")
golem::run_dev()
golem::run_dev()
rv$data_results
isTruthy(rv$data_results)
###example data
data_2 <- data.frame(
time = c(1, 2),
total = c(2, 6),  # orange line
climate_effect = c(2, 3),  # blue line (constant)
total_error = c(0.5, 0.7),  # Error for orange
climate_error = c(0.3, 0.4) # Error for blue
)
# Convert data to long format for easier legend handling
data_long <- tidyr::pivot_longer(data_2,
cols = c(total, climate_effect), names_to = "category", values_to = "value")
data_2$color_ribbon <- "striped area"
# Plot
ggplot2::ggplot(data_long,
ggplot2::aes(x = time, y = value, color = category, group = category)) +
# Shaded area
ggplot2::geom_ribbon(data = data_2,
ggplot2::aes(x = time, ymin = climate_effect, ymax = total, fill = color_ribbon),
alpha = 0.5, inherit.aes = FALSE) +
# Climate effect line
ggplot2::geom_line(size = 1.5) +
# Error bars
ggplot2::geom_errorbar(data = data_2, ggplot2::aes(x = time, ymin = total - total_error, ymax = total + total_error, color = "total"),
width = 0.2, inherit.aes = FALSE) +
ggplot2::geom_errorbar(data = data_2, ggplot2::aes(x = time, ymin = climate_effect - climate_error, ymax = climate_effect + climate_error, color = "climate effect"),
width = 0.2, inherit.aes = FALSE) +
# Axis labels
ggplot2::labs(x = NULL, y = NULL, color = "Legend", fill = "Legend") +  # Remove global x label
ggplot2::scale_x_continuous(breaks = data$time, labels = rep("time", length(data$time))) +  # Repeat 'time' under each tick
ggplot2::scale_color_manual(values = c("total" = "#0483A4", "climate effect" = "#F49633")) +
ggplot2::scale_fill_manual(name = "Result", values = c("striped area" = "#37a635")) +  # Updated fill mapping
ggplot2::theme(
legend.background =  ggplot2::element_blank(),
legend.box.background =  ggplot2::element_blank(),
legend.key = ggplot2::element_rect(fill = "transparent", color = NA),
legend.text = ggplot2::element_text(size = 14),
panel.background =  ggplot2::element_blank(),
panel.border =  ggplot2::element_rect(color = "#EAEFEC", fill = NA, size = 1),
panel.grid.major = ggplot2::element_line(color = "#EAEFEC"),
plot.title = ggplot2::element_text(size = 20, face = "bold", hjust = 0.5),
axis.title.x = ggplot2::element_text(size = 16),
axis.title.y = ggplot2::element_text(size = 16),
axis.text = ggplot2::element_text(size = 14)
)+
ggplot2::theme_minimal() +
ggplot2::theme(
axis.title.y = ggplot2::element_blank(),
axis.text.y = ggplot2::element_blank(),
axis.text.x = ggplot2::element_text(size = 12)  # Ensure x-axis labels are visible
)
Q
golem::run_dev()
golem::run_dev()
golem::run_dev()
check_cols
required_cols
all(check_cols %in% required_cols)
unique(loaded_data$survey)[1]
unique(loaded_data$year)[1]
unique(loaded_data$year)
unique(loaded_data$z)
max(unique(loaded_data$z))
dplyr::filter(loaded_data,
survey == unique(loaded_data$survey)[1], # take a survey -- will have to decide what to do
year == unique(loaded_data$year)[1], #for now
z == 0.55)
golem::run_dev()
soccatoa::example_output
soccatoa::example_output
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev(
)
golem::run_dev()
golem::run_dev()
load(data/example_output.rda)
load(example_output)
load("/data/notebooks/rstudio-madtigsoccatoa/soccatoa/data/example_output.rda")
View(example_output)
View(example_output)
View(example_output)
View(example_output)
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
install.packages("styler")
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_pkg()
golem::run_dev()
golem::run_dev()
dropdown_ids
output$select_survey
input$select_survey
golem::run_dev()
# check that the columns selected by the user make sense
values_that_are_numeric <- c(input$dropdown_values$select_z, input$dropdown_values$select_d, input$dropdown_values$select_rho_fe,
input$dropdown_values$select_f_c, input$dropdown_values$select_S_cz)
values_that_are_numeric
input$dropdown_values$select_z
rv_local$loaded_data<- rv_local$loaded_data %>%
dplyr::mutate(across(all_of(values_that_are_numeric), as.numeric))
rv_local$loaded_data
as.numeric(rv_local$loaded_data[, values_that_are_numeric])
rv_local$loaded_data[, values_that_are_numeric]
numeric_vector <- na.omit(unlist(rv_local$loaded_data[, values_that_are_numeric, drop = FALSE]))
numeric_vector
expected_numeric <- c(input$dropdown_values$select_z, input$dropdown_values$select_d, input$dropdown_values$select_rho_fe,
input$dropdown_values$select_f_c, input$dropdown_values$select_S_cz)
expected_numeric
input$dropdown_values
golem::run_dev()
golem::run_dev()
golem::run_dev()
input$select_survey
input$select_survey
golem::run_dev()
expected_numeric <- c(input$dropdown_values$select_z, input$dropdown_values$select_d, input$dropdown_values$select_rho_fe,
input$dropdown_values$select_f_c, input$dropdown_values$select_S_cz)
expected_character <- c(input$dropdown_values$select_survey, input$dropdown_values$select_site_id)
#Check numeric columns
numeric_check <- all(sapply(df[c(input$dropdown_values$select_z, input$dropdown_values$select_d, input$dropdown_values$select_rho_fe,
input$dropdown_values$select_f_c, input$dropdown_values$select_S_cz)], function(x) all(!is.na(as.numeric(as.character(x))))))
Q
Q
golem::run_dev()
golem::run_dev()
expected_numeric <- c(input$dropdown_values$select_z, input$dropdown_values$select_d, input$dropdown_values$select_rho_fe,
input$dropdown_values$select_f_c, input$dropdown_values$select_S_cz)
expected_character <- c(input$dropdown_values$select_survey, input$dropdown_values$select_site_id)
expected_numeric <- c(input$dropdown_values$select_z, input$dropdown_values$select_d, input$dropdown_values$select_rho_fe,
input$dropdown_values$select_f_c, input$dropdown_values$select_S_cz)
expected_character <- c(input$dropdown_values$select_survey, input$dropdown_values$select_site_id)
numeric_check <- all(sapply(df[,expected_numeric], function(x) all(!is.na(as.numeric(as.character(x))))))
Q
Q
golem::run_dev()
expected_numeric <- c(input$dropdown_values$select_z, input$dropdown_values$select_d, input$dropdown_values$select_rho_fe,
input$dropdown_values$select_f_c, input$dropdown_values$select_S_cz)
expected_character <- c(input$dropdown_values$select_survey, input$dropdown_values$select_site_id)
numeric_check <- all(sapply(rv_local$loaded_data[,expected_numeric], function(x) all(!is.na(as.numeric(as.character(x))))))
all(sapply(rv_local$loaded_data[,expected_numeric], function(x) all(!is.na(as.numeric(as.character(x))))))
numeric_check <- all(sapply(rv_local$loaded_data[, expected_numeric, drop = FALSE], function(x) {
suppressWarnings(!any(is.na(as.numeric(as.character(x))) & !is.na(x)))
}))
numeric_check
numeric_check <- all(sapply(rv_local$loaded_data[, expected_numeric, drop = FALSE], function(x) { suppressWarnings(!any(is.na(as.numeric(as.character(x))) & !is.na(x)))}))
numeric_check
character_check
character_check <- all(sapply(rv_local$loaded_data[, expected_character], function(x) { all(is.na(x) | is.character(as.character(x))) }))
character_check
input$dropdown_values
rv_local$loaded_data[, input$dropdown_values$select_survey]
input$dropdown_values
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::add_module("modal_upload")
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::add_module("modal_upload")
golem::run_dev()
# Variables by unit type
unit_map <- list(
length = c("z", "d"),
density = c("rho_fe"),
carbon = c("f_c", "S_cz")
)
golem::run_dev()
styler:::style_active_pkg()
styler:::style_active_pkg()
golem::run_dev()
golem::run_dev()
# check that the columns selected by the user "make sense"
expected_numeric <- c(
input$dropdown_values$select_z, input$dropdown_values$select_d, input$dropdown_values$select_rho_fe,
input$dropdown_values$select_f_c, input$dropdown_values$select_S_cz
)
expected_numeric
expected_numeric <- expected_numeric[expected_numeric != "absent"]
expected_numeric
input$dropdown_values$select_survey
my_columns <- list(
survey = input$dropdown_values$select_survey,
site_id = input$dropdown_values$select_site_id,
z = input$dropdown_values$select_z,
d = input$dropdown_values$select_d,
rho_fe = input$dropdown_values$select_rho_fe,
f_c = input$dropdown_values$select_f_c,
S_cz = input$dropdown_values$select_S_cz
)
my_columns <- lapply(my_columns, function(x) {
if (identical(x, "absent")) NA else x
})
my_columns
# check that the columns selected by the user "make sense"
expected_numeric <- c(
input$dropdown_values$select_z, input$dropdown_values$select_d, input$dropdown_values$select_rho_fe,
input$dropdown_values$select_f_c, input$dropdown_values$select_S_cz
)
expected_numeric <- expected_numeric[expected_numeric != "absent"]
expected_character <- c(input$dropdown_values$select_survey, input$dropdown_values$select_site_id)
expected_character <- expected_numeric[expected_character != "absent"]
my_columns$survey
# check that the columns selected by the user "make sense"
expected_numeric <- c( my_columns$z, my_columns$d, my_columns$rho_fe, my_columns$f_c, my_columns$S_cz)
expected_numeric <- expected_numeric[expected_numeric != "absent"]
expected_character <- c(my_columns$survey, my_columns$site_id)
numeric_check <- all(sapply(rv_local$loaded_data[, expected_numeric, drop = FALSE], function(x) {
suppressWarnings(!any(is.na(as.numeric(as.character(x))) & !is.na(x)))
}))
# check that the columns selected by the user "make sense"
expected_numeric <- c( my_columns$z, my_columns$d, my_columns$rho_fe, my_columns$f_c, my_columns$S_cz)
expected_character <- c(my_columns$survey, my_columns$site_id)
numeric_check <- all(sapply(rv_local$loaded_data[, expected_numeric, drop = FALSE], function(x) {
suppressWarnings(!any(is.na(as.numeric(as.character(x))) & !is.na(x)))
}))
rv_local$loaded_data
expected_numeric
golem::run_dev()
input$dropdown_values
my_columns
rv_local$loaded_data
output_cols <- c("survey", "site_id", "z", "d", "rho_fe", "f_c", "S_cz")
df_selected <- data.frame(row.names = seq_len(nrow(rv_local$loaded_data)))
df_selected
output_cols
golem::run_dev()
df_selected
rv_local$loaded_data
golem::run_dev()
# check that the columns selected by the user "make sense"
the_columns <- c(lon= input$col_lon,
lat =input$col_lat,
geom = input$col_geom,
year = input$col_year,
date = input$col_date)
the_columns
input$col_geom
input$col_year
input$col_date
# check that the columns selected by the user "make sense"
the_columns <- c(lon= input$col_lon,
lat =input$col_lat,
geom = input$col_geom,
year = input$col_year,
date = input$col_date)
the_columns
the_columns$lon
# check that the columns selected by the user "make sense"
the_columns <- list(lon= input$col_lon,
lat =input$col_lat,
geom = input$col_geom,
year = input$col_year,
date = input$col_date)
the_columns
the_columns$lon
the_columns$geom
c(the_columns$lon, the_columns$lat)
input$location_type
golem::run_dev()
styler:::style_active_pkg()
golem::run_dev()
my_columns
# absent to NA
my_columns <- lapply(the_columns, function(x) {
if (identical(x, "")) NA else x
})
my_columns
the_columns <- lapply(the_columns, function(x) {
if (is.null(x)) NA else x
})
the_columns
# absent to NA
the_columns <- lapply(the_columns, function(x) {
if (identical(x, "")) NA else x
})
the_columns <- lapply(the_columns, function(x) {
if (is.null(x)) NA else x
})
the_columns
input$location_type
check_present <- all(!is.na(c(the_columns$lon, the_columns$lat)))
check_present
check_present <- !is.na(the_columns$geom)
check_present
the_columns$year
the_columns$date
the_columns$col_year
the_columns <- list(
lon = input$col_lon,
lat = input$col_lat,
geom = input$col_geom,
year = input$col_year,
date = input$col_date
)
# absents to NA
the_columns <- lapply(the_columns, function(x) {
if (identical(x, "")) NA else x
})
the_columns <- lapply(the_columns, function(x) {
if (is.null(x)) NA else x
})
# check the right one are present
if (input$location_type == "lon_lat") {
check_present <- all(!is.na(c(the_columns$lon, the_columns$lat)))
}else{
check_present <- !is.na(the_columns$geom)
}
rv_local$loaded_data
# rename the columns
output_cols <- c("lon", "lat", "year")
df_selected <- data.frame(row.names = seq_len(nrow(rv_local$loaded_data)))
input_col <- the_columns[[colname]]
the_columns
source("~/repositories/soccatoa_app/R/mod_modal_upload.R")
golem::run_dev()
rv_local$to_load
golem::run_dev()
input$acceptCheckbox
rv_local$to_load
rv$user
###upload to db ##
data_to_save <- rv_local$to_load
data_to_save
data_to_save$user <- rv$user
#save the loaded data into the system
load(here::here("data/all_data.rda"))
all_data <- rbind(all_data, data_to_save)
View(all_data)
View(all_data)
View(all_data)
all_data <- all_data %>%
dplyr::distinct(dplyr::across(-user), .keep_all = TRUE)
all_data <- janitor::remove_empty(all_data, which = "rows")
View(all_data)
rv$all_data <- all_data
save(all_data, file = here::here("data/all_data.rda"))
# automatically select the site of the uploaded file to run
rv_local$selected_sites <- c(data_to_save$site_id)
golem::run_dev()
all_data <- data.frame(
"survey" = NA, # survey
"site_id" = NA, # a unique site code
"year" = NA, # or date "YYYY-mm-dd"
"lon" = NA,
"lat" = NA,
"z" = NA,
"d" = NA,
"rho_fe" = NA,
"f_c" = NA,
"S_cz" = NA,
"user" = NA
)
usethis::use_data(all_data, overwrite = TRUE)
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
load("~/repositories/soccatoa_app/data/example_output.rda")
View(example_output)
golem::run_dev()
load("~/repositories/soccatoa_app/data/accounts.rda")
View(accounts)
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
x <- c("01-Jan-24", "15-Feb-24", NA)
type <- "%d-%b-%y"
original_dates <- as.Date(x, format = type)
corrected_dates <- ifelse(is.na(original_dates), NA,
format(original_dates, "%d/%m/%Y")
)
corrected_dates
all_data <- data.frame(
"survey" = NA, # survey
"site_id" = NA, # a unique site code
"date" = NA,
"month" = NA,
"year" = NA, # or date "YYYY-mm-dd"
"lon" = NA,
"lat" = NA,
"z" = NA,
"d" = NA,
"rho_fe" = NA,
"f_c" = NA,
"S_cz" = NA,
"user" = NA
)
usethis::use_data(all_data, overwrite = TRUE)
all_data <- data.frame(
"survey" = NA, # survey
"site_id" = NA, # a unique site code
"day" = NA,
"month" = NA,
"year" = NA, # or date "YYYY-mm-dd"
"lon" = NA,
"lat" = NA,
"z" = NA,
"d" = NA,
"rho_fe" = NA,
"f_c" = NA,
"S_cz" = NA,
"user" = NA
)
usethis::use_data(all_data, overwrite = TRUE)
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
rv_local$loaded_data
the_columns[["lon"]]
the_columns[["lat"]]
# if in BNG transform to wgs84
coords <- sf::st_as_sf(rv_local$loaded_data, coords = c(the_columns[["lon"]], the_columns[["lat"]]), crs = 27700)
golem::run_dev()
# if in BNG transform to wgs84
coords <- sf::st_as_sf(rv_local$loaded_data, coords = c(the_columns[["lon"]], the_columns[["lat"]]), crs = 27700)
# if in BNG transform to wgs84
rv_local$loaded_data$easting <- as.numeric(the_columns[["lon"]])
rv_local$loaded_data$northng <- as.numeirc(the_columns[["lat"]])
rv_local$loaded_data
the_columns[["lat"]]
the_columns[["lon"]]
rv_local$loaded_data[,the_columns[["lon"]]]
# if in BNG transform to wgs84
rv_local$loaded_data$easting <- as.numeric(rv_local$loaded_data[,the_columns[["lon"]]])
rv_local$loaded_data$northng <- as.numeirc(rv_local$loaded_data[,the_columns[["lat"]]])
coords <- sf::st_as_sf(rv_local$loaded_data, coords = c(easting, northng, crs = 27700))
# if in BNG transform to wgs84
rv_local$loaded_data$easting <- as.numeric(rv_local$loaded_data[,the_columns[["lon"]]])
rv_local$loaded_data$northng <- as.numeirc(rv_local$loaded_data[,the_columns[["lat"]]])
# if in BNG transform to wgs84
rv_local$loaded_data [, the_columns[["lon"]]] <- as.numeric(as.character(rv_local$loaded_data [, the_columns[["lon"]]]))
rv_local$loaded_data [, the_columns[["lat"]]] <- as.numeric(as.character(rv_local$loaded_data [, the_columns[["lat"]]]))
rv_local$loaded_data
rv_local$loaded_data [, the_columns[["lon"]]
rv_local$loaded_data [, the_columns[["lon"]]]
rv_local$loaded_data [, the_columns[["lon"]]]
golem::run_dev()
rv_local$loaded_data
# if in BNG transform to wgs84
rv_local$loaded_data <- rv_local$loaded_data %>%
dplyr::mutate(
the_columns[["lon"]] = as.numeric(Easting),
# if in BNG transform to wgs84
rv_local$loaded_data <- rv_local$loaded_data %>%
dplyr::mutate(
the_columns[["lon"]] := as.numeric(Easting),
the_columns[["lat"]] := as.numeric(Northing)
)
# if in BNG transform to wgs84
coords <- sf::st_as_sf(rv_local$loaded_data, coords = c(the_columns[["lon"]], the_columns[["lat"]]), crs = 27700)
coords_wgs84 <- sf::st_transform(coords, crs = 4326)
lons <- sf::st_coordinates(coords_wgs84)[, 1]
lats <- sf::st_coordinates(coords_wgs84)[, 2]
golem::run_dev()
golem::run_dev()
golem::run_dev()
