golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
rv_local$uploaded
rv_local$uploaded
#check document fits the requirements
right_doc <- sample(c(TRUE, FALSE), 1)
isTRUE(right_doc)
isTruthy(right_doc)
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
lat <-sample(c(49:59), 10)
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
ribbon_data <- data.frame(x = c(5, 8),
ymin = c(6, 8),
ymax = c(6,12),
striped_area = "striped_area")
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::add_shinyserver_file()
getwd()
renv::install("golem", library = here::here("renv/sandbox/R-4.2/x86_64-pc-linux-gnu/25ebdc09"))
here::here("renv/sandbox/R-4.2/x86_64-pc-linux-gnu/25ebdc09")
renv::install("golem", library = here::here("renv/sandbox/R-4.2/x86_64-pc-linux-gnu/25ebdc09"))
here::here("renv/sandbox/R-4.4/x86_64-pc-linux-gnu/25ebdc09")
renv::install("golem", library = here::here("renv/sandbox/R-4.4/x86_64-pc-linux-gnu/25ebdc09"))
if (isTRUE(right_doc)){
rv$my_data <- trees
#make the graph/map
if (isTruthy(rv$my_data)){
fig <-
plotly::plot_ly(data = rv$my_data, x = ~Girth, y = ~Volume, type = 'scatter', mode = 'markers')%>%
plotly::layout(title = 'A significant title',
xaxis = list(title = 'Girth'),
yaxis = list(title = 'Volume'),
hovermode = "x",
margin = list(t = 0, r = 0, l = 0, b = 0),
font = list(color = "white"),
paper_bgcolor = "transparent",
plot_bgcolor = "transparent"
) %>%
plotly::config(displayModeBar = F) %>%
htmlwidgets::onRender(
"function(el) { var ro = new ResizeObserver(function() { var visible = el.offsetHeight > 200; Plotly.relayout(el, {'xaxis.visible': visible}); }); ro.observe(el); }"
)
rv$example_locations <- data.frame(lons = sample(c(-10.5:1.8), 10),
lats = sample(c(49.5:59.5), 10)
)
map_sites <-
leaflet::leaflet() %>%
leaflet::addProviderTiles("Esri.WorldImagery", group="Esri.WorldImagery",options = leaflet::providerTileOptions(zIndex=0, noWrap = TRUE)) %>%
leaflet::setView(lng = -1.6, lat = 53.8, zoom = 4) %>% #UK
leaflet::addProviderTiles("OpenStreetMap.Mapnik", options = leaflet::providerTileOptions(zIndex=0, noWrap = TRUE), group = "Streets") %>%
leaflet::addProviderTiles("Esri.WorldImagery", options = leaflet::providerTileOptions(zIndex=0, noWrap = TRUE), group = "Satellite")%>%
leaflet::addLayersControl(baseGroups = c("Streets", "Satellite"), options = leaflet::layersControlOptions(collapsed = T, position = "topright"))%>%
leaflet::addCircleMarkers(data = rv$example_locations, lng = ~lons  , lat = ~lats,
radius = 5, color = "#F49633", fill = "#F49633", fillOpacity = 1,
popup  = paste(rv$example_locations$lons, ", ", rv$example_locations$lats))
} else {
fig <- NULL
map_sites <- NULL
}
#display the boxes
output$right_format <- renderUI({
list(
shinydashboard::infoBox("compatible file loaded", icon = icon(name = 'ok', lib = "glyphicon"), width = NULL)
)
})
output$document_1 <- renderUI({
list (
bslib::card(height = 400,
full_screen = TRUE,
bslib::card_body(
p(lorem::ipsum(2), style = "text-align:justify;")
),
),
bslib:: value_box(
height = 250,
style = 'background-color: #FFFFFF!important; color:black;',
title = "Quick glance",
value = round(mean(rv$my_data$Volume),1),
p("Started at 12.6%"),
p("Averaged 8.6% over that period"),
p("Peaked 17.3% in May 1975"),
showcase = fig,
full_screen = TRUE
)
)
})
#the map
output$map <- renderUI({
list(
bslib::card(full_screen = TRUE,
height = 400,
bslib::card_body(class = "p-0",
map_sites)
)
)
})
#the documentation
output$documentation <- renderUI({
bslib::card(height = 250,
bslib::card_body(
p(lorem::ipsum(1, 2), style = "text-align:justify;"),
downloadButton(ns("download_documentation"), "Download documenntation", class = "btn-info", width = "100%", style = "font-size:100%" )
)
)
})
output$calculate <- renderUI ({
actionButton(inputId = ns("model_output"),
label = div(icon("play", lib = "font-awesome"),
"model results"),
width = "100%", style="margin-right: auto; font-size:100%;", class = "btn-danger", style = "display:flex; padding: 15px;")
})
#don't show wrong alert
output$wrong_format <- renderUI({ return(NULL) })
output$format_description <- renderUI ({ return(NULL) })
} else {
output$wrong_format <- renderUI({
list(
shinydashboard::infoBox("wrong format file", icon = icon(name = 'remove-sign', lib = "glyphicon"), width = NULL)
)
})
output$format_description <- renderUI ({
bslib::card(height = 500,
bslib::card_body(
p(lorem::ipsum(5,3), style = "text-align:justify;")
)
)
})
#don't show anything here
output$right_format <- renderUI({ return(NULL) })
output$document_1 <- renderUI({ return(NULL) })
output$map <- renderUI({ return(NULL) })
output$documentation <- renderUI({ return(NULL) })
output$calculate <- renderUI ({ return(NULL) })
}
observeEvent(input$submit, ignoreInit = T, label = "when uploaded file update rv",{
#check document fits the requirements
loaded_data <- readr::read_csv(input$upload$datapath, show_col_types = FALSE)
check_cols <- colnames(loaded_data)
required_cols <- c("region", "survey", "site", "site_id", "lon", "lat", "year", "land_use", "land_use_sub", "loc_id", "core_id", "z", "d", "rho_fe" ,"rho_c","f_c","s_fei", "S_fez", "s_ci", "S_cz",  "i", "u", "z2")
if ( all(check_cols %in% required_cols) ){
right_doc <- T
} else {
right_doc <- F
}
if (isTRUE(right_doc)){
rv$my_data <- trees
#make the graph/map
if (isTruthy(rv$my_data)){
fig <-
plotly::plot_ly(data = rv$my_data, x = ~Girth, y = ~Volume, type = 'scatter', mode = 'markers')%>%
plotly::layout(title = 'A significant title',
xaxis = list(title = 'Girth'),
yaxis = list(title = 'Volume'),
hovermode = "x",
margin = list(t = 0, r = 0, l = 0, b = 0),
font = list(color = "white"),
paper_bgcolor = "transparent",
plot_bgcolor = "transparent"
) %>%
plotly::config(displayModeBar = F) %>%
htmlwidgets::onRender(
"function(el) { var ro = new ResizeObserver(function() { var visible = el.offsetHeight > 200; Plotly.relayout(el, {'xaxis.visible': visible}); }); ro.observe(el); }"
)
rv$example_locations <- data.frame(lons = sample(c(-10.5:1.8), 10),
lats = sample(c(49.5:59.5), 10)
)
map_sites <-
leaflet::leaflet() %>%
leaflet::addProviderTiles("Esri.WorldImagery", group="Esri.WorldImagery",options = leaflet::providerTileOptions(zIndex=0, noWrap = TRUE)) %>%
leaflet::setView(lng = -1.6, lat = 53.8, zoom = 4) %>% #UK
leaflet::addProviderTiles("OpenStreetMap.Mapnik", options = leaflet::providerTileOptions(zIndex=0, noWrap = TRUE), group = "Streets") %>%
leaflet::addProviderTiles("Esri.WorldImagery", options = leaflet::providerTileOptions(zIndex=0, noWrap = TRUE), group = "Satellite")%>%
leaflet::addLayersControl(baseGroups = c("Streets", "Satellite"), options = leaflet::layersControlOptions(collapsed = T, position = "topright"))%>%
leaflet::addCircleMarkers(data = rv$example_locations, lng = ~lons  , lat = ~lats,
radius = 5, color = "#F49633", fill = "#F49633", fillOpacity = 1,
popup  = paste(rv$example_locations$lons, ", ", rv$example_locations$lats))
} else {
fig <- NULL
map_sites <- NULL
}
#display the boxes
output$right_format <- renderUI({
list(
shinydashboard::infoBox("compatible file loaded", icon = icon(name = 'ok', lib = "glyphicon"), width = NULL)
)
})
output$document_1 <- renderUI({
list (
bslib::card(height = 400,
full_screen = TRUE,
bslib::card_body(
p(lorem::ipsum(2), style = "text-align:justify;")
),
),
bslib:: value_box(
height = 250,
style = 'background-color: #FFFFFF!important; color:black;',
title = "Quick glance",
value = round(mean(rv$my_data$Volume),1),
p("Started at 12.6%"),
p("Averaged 8.6% over that period"),
p("Peaked 17.3% in May 1975"),
showcase = fig,
full_screen = TRUE
)
)
})
#the map
output$map <- renderUI({
list(
bslib::card(full_screen = TRUE,
height = 400,
bslib::card_body(class = "p-0",
map_sites)
)
)
})
#the documentation
output$documentation <- renderUI({
bslib::card(height = 250,
bslib::card_body(
p(lorem::ipsum(1, 2), style = "text-align:justify;"),
downloadButton(ns("download_documentation"), "Download documenntation", class = "btn-info", width = "100%", style = "font-size:100%" )
)
)
})
output$calculate <- renderUI ({
actionButton(inputId = ns("model_output"),
label = div(icon("play", lib = "font-awesome"),
"model results"),
width = "100%", style="margin-right: auto; font-size:100%;", class = "btn-danger", style = "display:flex; padding: 15px;")
})
#don't show wrong alert
output$wrong_format <- renderUI({ return(NULL) })
output$format_description <- renderUI ({ return(NULL) })
} else {
output$wrong_format <- renderUI({
list(
shinydashboard::infoBox("wrong format file", icon = icon(name = 'remove-sign', lib = "glyphicon"), width = NULL)
)
})
output$format_description <- renderUI ({
bslib::card(height = 500,
bslib::card_body(
p(lorem::ipsum(5,3), style = "text-align:justify;")
)
)
})
#don't show anything here
output$right_format <- renderUI({ return(NULL) })
output$document_1 <- renderUI({ return(NULL) })
output$map <- renderUI({ return(NULL) })
output$documentation <- renderUI({ return(NULL) })
output$calculate <- renderUI ({ return(NULL) })
}
})
getwd()
getwd()
golem::run_dev()
golem::run_dev()
golem::run_dev()
getwd()
getwd()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
# Convert data to long format for easier legend handling
data_long <- tidyr::pivot_longer(data_2,
cols = c(total, climate_effect), names_to = "category", values_to = "value")
golem::run_dev()
golem::run_dev()
rv$data_results
isTruthy(rv$data_results)
###example data
data_2 <- data.frame(
time = c(1, 2),
total = c(2, 6),  # orange line
climate_effect = c(2, 3),  # blue line (constant)
total_error = c(0.5, 0.7),  # Error for orange
climate_error = c(0.3, 0.4) # Error for blue
)
# Convert data to long format for easier legend handling
data_long <- tidyr::pivot_longer(data_2,
cols = c(total, climate_effect), names_to = "category", values_to = "value")
data_2$color_ribbon <- "striped area"
# Plot
ggplot2::ggplot(data_long,
ggplot2::aes(x = time, y = value, color = category, group = category)) +
# Shaded area
ggplot2::geom_ribbon(data = data_2,
ggplot2::aes(x = time, ymin = climate_effect, ymax = total, fill = color_ribbon),
alpha = 0.5, inherit.aes = FALSE) +
# Climate effect line
ggplot2::geom_line(size = 1.5) +
# Error bars
ggplot2::geom_errorbar(data = data_2, ggplot2::aes(x = time, ymin = total - total_error, ymax = total + total_error, color = "total"),
width = 0.2, inherit.aes = FALSE) +
ggplot2::geom_errorbar(data = data_2, ggplot2::aes(x = time, ymin = climate_effect - climate_error, ymax = climate_effect + climate_error, color = "climate effect"),
width = 0.2, inherit.aes = FALSE) +
# Axis labels
ggplot2::labs(x = NULL, y = NULL, color = "Legend", fill = "Legend") +  # Remove global x label
ggplot2::scale_x_continuous(breaks = data$time, labels = rep("time", length(data$time))) +  # Repeat 'time' under each tick
ggplot2::scale_color_manual(values = c("total" = "#0483A4", "climate effect" = "#F49633")) +
ggplot2::scale_fill_manual(name = "Result", values = c("striped area" = "#37a635")) +  # Updated fill mapping
ggplot2::theme(
legend.background =  ggplot2::element_blank(),
legend.box.background =  ggplot2::element_blank(),
legend.key = ggplot2::element_rect(fill = "transparent", color = NA),
legend.text = ggplot2::element_text(size = 14),
panel.background =  ggplot2::element_blank(),
panel.border =  ggplot2::element_rect(color = "#EAEFEC", fill = NA, size = 1),
panel.grid.major = ggplot2::element_line(color = "#EAEFEC"),
plot.title = ggplot2::element_text(size = 20, face = "bold", hjust = 0.5),
axis.title.x = ggplot2::element_text(size = 16),
axis.title.y = ggplot2::element_text(size = 16),
axis.text = ggplot2::element_text(size = 14)
)+
ggplot2::theme_minimal() +
ggplot2::theme(
axis.title.y = ggplot2::element_blank(),
axis.text.y = ggplot2::element_blank(),
axis.text.x = ggplot2::element_text(size = 12)  # Ensure x-axis labels are visible
)
Q
golem::run_dev()
golem::run_dev()
golem::run_dev()
check_cols
required_cols
all(check_cols %in% required_cols)
unique(loaded_data$survey)[1]
unique(loaded_data$year)[1]
unique(loaded_data$year)
unique(loaded_data$z)
max(unique(loaded_data$z))
dplyr::filter(loaded_data,
survey == unique(loaded_data$survey)[1], # take a survey -- will have to decide what to do
year == unique(loaded_data$year)[1], #for now
z == 0.55)
golem::run_dev()
soccatoa::example_output
soccatoa::example_output
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev(
)
golem::run_dev()
golem::run_dev()
load(data/example_output.rda)
load(example_output)
load("/data/notebooks/rstudio-madtigsoccatoa/soccatoa/data/example_output.rda")
View(example_output)
View(example_output)
View(example_output)
View(example_output)
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
